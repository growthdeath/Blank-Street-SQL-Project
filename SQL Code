DROP DATABASE IF EXISTS Blank_Street;
CREATE DATABASE `Blank_Street`; 
USE `Blank_Street`;

SET NAMES utf8 ;
SET character_set_client = utf8mb4 ;

CREATE TABLE `customer` (
  `customer_id` int(11) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(50) NOT NULL,
  `last_name` varchar(50) NOT NULL,
  `birth_date` date DEFAULT NULL,
  `phone` varchar(50) DEFAULT NULL,
  `address` varchar(50) NOT NULL,
  `points` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`customer_id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


  CREATE TABLE `stores`(
`location`VARCHAR(50),
`revenue_pd` DECIMAL (10,2),
`store_id`VARCHAR (10),
`fixed_store_cost` DECIMAL(10,0),
PRIMARY KEY (`store_id`)
 ) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
  
CREATE TABLE `orders` (
  `order_id` VARCHAR (11),
  `customer_id` int(11),
  `store_id` VARCHAR (10),
  `date` date DEFAULT NULL,
  `total_price`DECIMAL (10,2),
  PRIMARY KEY (`order_id`),
  CONSTRAINT fk_cust_id_ord FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
  CONSTRAINT fk_store_id_ord FOREIGN KEY (store_id) REFERENCES stores(store_id)
  ) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
  
    CREATE TABLE `suppliers`(
  `supplier_id` CHAR (15),
  `supplier_name` VARCHAR (50),
  `total_price_w` DECIMAL (10,2),
  `store_id` VARCHAR(10),
  PRIMARY KEY (`supplier_id`),
  CONSTRAINT fk_store_id_sup FOREIGN KEY (store_id) REFERENCES stores(store_id)
  ) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
  
CREATE TABLE `products`(
`product_id` VARCHAR (15),
`product_name` VARCHAR (50),
`price`DECIMAL (10,2),
`supplier_id` CHAR(15),
`cost` DECIMAL (10,2),
`category`CHAR(15),
`inventory` DECIMAL(10,0),
PRIMARY KEY (`product_id`),
CONSTRAINT fk_supp_id_prod FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
  
 CREATE TABLE `orders_details` (
  `order_id`VARCHAR(11);
  `order_detail_id` CHAR (10),
  `customer_id` int(11) NOT NULL,
  `store_id` VARCHAR (10),
  `product_id` VARCHAR (3) NOT NULL,
  `unit_price`DECIMAL (10,2),
  `order_quantity` DECIMAL (10,0),
  PRIMARY KEY (`order_id`),
  CONSTRAINT fk_ord_id_ordds FOREIGN KEY (order_id) REFERENCES orders(order_id),
  CONSTRAINT fk_cust_id_ordds FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
  CONSTRAINT fk_store_id_ordds FOREIGN KEY (store_id) REFERENCES stores(store_id),
  CONSTRAINT fk_prod_id_ordds FOREIGN KEY (product_id) REFERENCES products(product_id)
  )
  ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
  
  CREATE TABLE `supplier_details`(
  `supplier_detail_id`CHAR (15),
  `supplier_id` CHAR (15),
  `product_id` VARCHAR (15),
  `order_date` date,
  `unit_price` DECIMAL (10,2),
  `supplier_quantity` DECIMAL (10,0),
  PRIMARY KEY (`supplier_detail_id`),
  CONSTRAINT fk_supp_id_supds FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id),
  CONSTRAINT fk_prod_id_supds FOREIGN KEY (product_id) REFERENCES products(product_id)
  ) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

# After this, I inserted values into the tables. Once this had been achieved, I could begin to run queries to retrieve 
relevant data 

## Using the SELECT and ORDER BY clauses
SELECT * FROM stores
ORDER BY revenue_pd DESC;

## Using UNIONS and WHERE
SELECT customer_id, first_name, points, 'bronze' AS type
FROM customer
WHERE points <= 1000
UNION
SELECT customer_id,first_name,points,'silver' AS type
FROM customers
WHERE points BETWEEN 1000 AND 2000
UNION
SELECT customer_id,first_name,points,'gold' AS type
FROM customers
WHERE points >= 2000
ORDER BY points DESC;

## Using INNER JOIN

SELECT o_d.order_id, o_d.product_id, p.product_name, p.unit_price,p.cateogy, o_d.customer_id
FROM orders_details AS o_d
JOIN products AS p
  ON o_d.product_id = p.product_id;

## Using OUTER JOIN 

SELECT st.store_id,st.location,sd.order_date,sd.product,s.total_price_w
FROM supplier_details AS sd
LEFT JOIN suppliers AS s
  ON sd.supplier_id = s.supplier_id
LEFT JOIN stores AS st
  ON s.store_id = st.store_id

## Using the LIMIT and WHERE queries to filter data

SELECT o.total_price, s.revenue_pd,s.store_id
FROM orders AS o, stores AS s
WHERE o.store_id = s.store_id
ORDER BY s.revenue_pd DESC
LIMIT 3;

## Creating a VIEW to find Low Performing Customers 

CREATE
ALGORITHM = UNDEFINED
DEFINER = `root`@`localhost`
SQL SECURITY DEFINER
VIEW `Blank_Street`.`low_performance_customers` AS
SELECT
`Blank_Street`.`customer`.`customer_id` AS `Customer_ID`,
`Blank_Street`.`customer`.`first_name` AS `First_Name`,
`Blank_Street`.`customer`.`last_name` AS `Last_Name`,
`Blank_Street`.`customer`.`points` AS `Points`
FROM
`Blank_Street`.`customer`
WHERE
(`Blank_Street`.`customer`.`points`< 100)
ORDER BY
`Blank_Street`.`customer`.`points`;



















